{"version":3,"sources":["../../src/examples/graph.js"],"names":["styles","graph","height","width","NODE_KEY","EMPTY_TYPE","SPECIAL_TYPE","SPECIAL_CHILD_SUBTYPE","EMPTY_EDGE_TYPE","SPECIAL_EDGE_TYPE","sample","nodes","id","title","x","y","type","subtype","edges","source","target","Graph","props","getViewNode","nodeKey","searchNode","i","getNodeIndex","state","onUpdateNode","viewNode","setState","onSelectNode","selected","onSelectEdge","viewEdge","onCreateNode","Math","random","length","push","onDeleteNode","splice","newEdges","filter","edge","onCreateEdge","sourceViewNode","targetViewNode","onSwapEdge","getEdgeIndex","JSON","parse","stringify","onDeleteEdge","findIndex","node","searchEdge","NodeTypes","GraphConfig","NodeSubtypes","EdgeTypes","el","GraphView","Component","App","window","onload","ReactDOM","render","document","getElementById"],"mappings":";;;;;;;;;AAwBA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;;;+eA5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAQ6C;;AAE7C,IAAMA,SAAS;AACbC,SAAO;AACLC,YAAQ,MADH;AAELC,WAAO;AAFF;AADM,CAAf;;AAOA,IAAMC,WAAW,IAAjB,C,CAAuB;;AAEvB;AACA;AACA;AACA,IAAMC,aAAa,OAAnB,C,CAA4B;AAC5B,IAAMC,eAAe,SAArB;AACA,IAAMC,wBAAwB,cAA9B;AACA,IAAMC,kBAAkB,WAAxB;AACA,IAAMC,oBAAoB,aAA1B;;AAEA;AACA;AACA;AACA,IAAMC,SAAS;AACbC,SAAO,CACL;AACEC,QAAI,CADN;AAEEC,WAAO,qBAFT;AAGEC,OAAG,iBAHL;AAIEC,OAAG,iBAJL;AAKEC,UAAMV;AALR,GADK,EAQL;AACEM,QAAI,CADN;AAEEC,WAAO,gDAFT;AAGEC,OAAG,iBAHL;AAIEC,OAAG,iBAJL;AAKEC,UAAMX,UALR;AAMEY,aAASV;AANX,GARK,EAgBL;AACEK,QAAI,CADN;AAEEC,WAAO,QAFT;AAGEC,OAAG,iBAHL;AAIEC,OAAG,iBAJL;AAKEC,UAAMX;AALR,GAhBK,EAuBL;AACEO,QAAI,CADN;AAEEC,WAAO,QAFT;AAGEC,OAAG,iBAHL;AAIEC,OAAG,kBAJL;AAKEC,UAAMX;AALR,GAvBK,CADM;AAgCba,SAAO,CACL;AACEC,YAAQ,CADV;AAEEC,YAAQ,CAFV;AAGEJ,UAAMP;AAHR,GADK,EAML;AACEU,YAAQ,CADV;AAEEC,YAAQ,CAFV;AAGEJ,UAAMR;AAHR,GANK;AAhCM,CAAf;;IA8Caa,K,WAAAA,K;;;AACX,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA,8GACXA,KADW;;AAAA,UAwBnBC,WAxBmB,GAwBL,UAACC,OAAD,EAAa;AACzB,UAAMC,aAAa,EAAnB;AACAA,iBAAWrB,QAAX,IAAuBoB,OAAvB;AACA,UAAME,IAAI,MAAKC,YAAL,CAAkBF,UAAlB,CAAV;AACA,aAAO,MAAKG,KAAL,CAAW3B,KAAX,CAAiBU,KAAjB,CAAuBe,CAAvB,CAAP;AACD,KA7BkB;;AAAA,UAqCnBG,YArCmB,GAqCJ,UAACC,QAAD,EAAc;AAC3B,UAAM7B,QAAQ,MAAK2B,KAAL,CAAW3B,KAAzB;AACA,UAAMyB,IAAI,MAAKC,YAAL,CAAkBG,QAAlB,CAAV;;AAEA7B,YAAMU,KAAN,CAAYe,CAAZ,IAAiBI,QAAjB;AACA,YAAKC,QAAL,CAAc,EAAE9B,OAAOA,KAAT,EAAd;AACD,KA3CkB;;AAAA,UA8CnB+B,YA9CmB,GA8CJ,UAACF,QAAD,EAAc;AAC3B;AACA,UAAI,CAAC,CAACA,QAAN,EAAgB;AACd,cAAKC,QAAL,CAAc,EAAEE,UAAUH,QAAZ,EAAd;AACD,OAFD,MAEO;AACL,cAAKC,QAAL,CAAc,EAAEE,UAAU,EAAZ,EAAd;AACD;AACF,KArDkB;;AAAA,UAwDnBC,YAxDmB,GAwDJ,UAACC,QAAD,EAAc;AAC3B,YAAKJ,QAAL,CAAc,EAAEE,UAAUE,QAAZ,EAAd;AACD,KA1DkB;;AAAA,UA6DnBC,YA7DmB,GA6DJ,UAACtB,CAAD,EAAIC,CAAJ,EAAU;AACvB,UAAMd,QAAQ,MAAK2B,KAAL,CAAW3B,KAAzB;;AAEA;AACA;AACA;AACA;AACA,UAAMe,OAAOqB,KAAKC,MAAL,KAAgB,IAAhB,GAAuBhC,YAAvB,GAAsCD,UAAnD;;AAEA,UAAMyB,WAAW;AACflB,YAAI,MAAKgB,KAAL,CAAW3B,KAAX,CAAiBU,KAAjB,CAAuB4B,MAAvB,GAAgC,CADrB;AAEf1B,eAAO,EAFQ;AAGfG,cAAMA,IAHS;AAIfF,WAAGA,CAJY;AAKfC,WAAGA;AALY,OAAjB;;AAQAd,YAAMU,KAAN,CAAY6B,IAAZ,CAAiBV,QAAjB;AACA,YAAKC,QAAL,CAAc,EAAE9B,OAAOA,KAAT,EAAd;AACD,KAhFkB;;AAAA,UAmFnBwC,YAnFmB,GAmFJ,UAACX,QAAD,EAAc;AAC3B,UAAM7B,QAAQ,MAAK2B,KAAL,CAAW3B,KAAzB;AACA,UAAMyB,IAAI,MAAKC,YAAL,CAAkBG,QAAlB,CAAV;AACA7B,YAAMU,KAAN,CAAY+B,MAAZ,CAAmBhB,CAAnB,EAAsB,CAAtB;;AAEA;AACA,UAAMiB,WAAW1C,MAAMiB,KAAN,CAAY0B,MAAZ,CAAmB,UAACC,IAAD,EAAOnB,CAAP,EAAa;AAC/C,eAAOmB,KAAK1B,MAAL,IAAeW,SAAS1B,QAAT,CAAf,IAAqCyC,KAAKzB,MAAL,IAAeU,SAAS1B,QAAT,CAA3D;AACD,OAFgB,CAAjB;;AAIAH,YAAMiB,KAAN,GAAcyB,QAAd;;AAEA,YAAKZ,QAAL,CAAc,EAAE9B,OAAOA,KAAT,EAAgBgC,UAAU,EAA1B,EAAd;AACD,KAhGkB;;AAAA,UAmGnBa,YAnGmB,GAmGJ,UAACC,cAAD,EAAiBC,cAAjB,EAAoC;AACjD,UAAM/C,QAAQ,MAAK2B,KAAL,CAAW3B,KAAzB;;AAEA;AACA;AACA,UAAMe,OAAO+B,eAAe/B,IAAf,KAAwBV,YAAxB,GAAuCG,iBAAvC,GAA2DD,eAAxE;;AAEA,UAAM2B,WAAW;AACfhB,gBAAQ4B,eAAe3C,QAAf,CADO;AAEfgB,gBAAQ4B,eAAe5C,QAAf,CAFO;AAGfY,cAAMA;AAHS,OAAjB;;AAMA;AACA,UAAImB,SAAShB,MAAT,KAAoBgB,SAASf,MAAjC,EAAyC;AACvCnB,cAAMiB,KAAN,CAAYsB,IAAZ,CAAiBL,QAAjB;AACA,cAAKJ,QAAL,CAAc,EAAE9B,OAAOA,KAAT,EAAd;AACD;AACF,KArHkB;;AAAA,UAwHnBgD,UAxHmB,GAwHN,UAACF,cAAD,EAAiBC,cAAjB,EAAiCb,QAAjC,EAA8C;AACzD,UAAMlC,QAAQ,MAAK2B,KAAL,CAAW3B,KAAzB;AACA,UAAMyB,IAAI,MAAKwB,YAAL,CAAkBf,QAAlB,CAAV;AACA,UAAMU,OAAOM,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAepD,MAAMiB,KAAN,CAAYQ,CAAZ,CAAf,CAAX,CAAb;;AAEAmB,WAAK1B,MAAL,GAAc4B,eAAe3C,QAAf,CAAd;AACAyC,WAAKzB,MAAL,GAAc4B,eAAe5C,QAAf,CAAd;AACAH,YAAMiB,KAAN,CAAYQ,CAAZ,IAAiBmB,IAAjB;;AAEA,YAAKd,QAAL,CAAc,EAAE9B,OAAOA,KAAT,EAAd;AACD,KAlIkB;;AAAA,UAqInBqD,YArImB,GAqIJ,UAACnB,QAAD,EAAc;AAC3B,UAAMlC,QAAQ,MAAK2B,KAAL,CAAW3B,KAAzB;AACA,UAAMyB,IAAI,MAAKwB,YAAL,CAAkBf,QAAlB,CAAV;AACAlC,YAAMiB,KAAN,CAAYwB,MAAZ,CAAmBhB,CAAnB,EAAsB,CAAtB;AACA,YAAKK,QAAL,CAAc,EAAE9B,OAAOA,KAAT,EAAgBgC,UAAU,EAA1B,EAAd;AACD,KA1IkB;;AAGjB,UAAKL,KAAL,GAAa;AACX3B,aAAOS,MADI;AAEXuB,gBAAU;AAFC,KAAb;AAHiB;AAOlB;;AAED;;;;;iCACaR,U,EAAY;AACvB,aAAO,KAAKG,KAAL,CAAW3B,KAAX,CAAiBU,KAAjB,CAAuB4C,SAAvB,CAAiC,UAACC,IAAD,EAAU;AAChD,eAAOA,KAAKpD,QAAL,MAAmBqB,WAAWrB,QAAX,CAA1B;AACD,OAFM,CAAP;AAGD;;AAED;;;;iCACaqD,U,EAAY;AACvB,aAAO,KAAK7B,KAAL,CAAW3B,KAAX,CAAiBiB,KAAjB,CAAuBqC,SAAvB,CAAiC,UAACV,IAAD,EAAU;AAChD,eAAOA,KAAK1B,MAAL,KAAgBsC,WAAWtC,MAA3B,IAAqC0B,KAAKzB,MAAL,KAAgBqC,WAAWrC,MAAvE;AACD,OAFM,CAAP;AAGD;;AAED;;;AAQA;;;;AAIA;AACA;;;AASA;;;AAUA;;;AAKA;;;AAsBA;;;AAgBA;;;AAqBA;;;AAaA;;;;;;AAQA;;;;6BAIS;AAAA;;AACP,UAAMT,QAAQ,KAAKiB,KAAL,CAAW3B,KAAX,CAAiBU,KAA/B;AACA,UAAMO,QAAQ,KAAKU,KAAL,CAAW3B,KAAX,CAAiBiB,KAA/B;AACA,UAAMe,WAAW,KAAKL,KAAL,CAAWK,QAA5B;;AAEA,UAAMyB,YAAYC,sBAAYD,SAA9B;AACA,UAAME,eAAeD,sBAAYC,YAAjC;AACA,UAAMC,YAAYF,sBAAYE,SAA9B;;AAEA,aACE;AAAA;AAAA,UAAK,IAAG,OAAR,EAAgB,OAAO7D,OAAOC,KAA9B;AACE,sCAAC,mBAAD;AACE,eAAK,aAAC6D,EAAD;AAAA,mBAAS,OAAKC,SAAL,GAAiBD,EAA1B;AAAA,WADP;AAEE,mBAAS1D,QAFX;AAGE,qBAAWC,UAHb;AAIE,iBAAOM,KAJT;AAKE,iBAAOO,KALT;AAME,oBAAUe,QANZ;AAOE,qBAAWyB,SAPb;AAQE,wBAAcE,YARhB;AASE,qBAAWC,SATb;AAUE,uBAAa,IAVf;AAWE,uBAAa,KAAKtC,WAXpB;AAYE,wBAAc,KAAKS,YAZrB;AAaE,wBAAc,KAAKI,YAbrB;AAcE,wBAAc,KAAKP,YAdrB;AAeE,wBAAc,KAAKY,YAfrB;AAgBE,wBAAc,KAAKP,YAhBrB;AAiBE,wBAAc,KAAKY,YAjBrB;AAkBE,sBAAY,KAAKG,UAlBnB;AAmBE,wBAAc,KAAKK,YAnBrB;AAoBE,yBAAe;AApBjB;AADF,OADF;AA0BD;;;;EApLwBU,gB;;AAuL3B;;;IACMC,G;;;;;;;;;;;6BACK;AACP,aAAO,8BAAC,KAAD,OAAP;AACD;;;;EAHeD,gB;;AAKlB,IAAI,OAAOE,MAAP,KAAkB,WAAtB,EAAmC;AACjCA,SAAOC,MAAP,GAAgB,YAAW;AACzBC,uBAASC,MAAT,CAAgB,8BAAC,GAAD,OAAhB,EAAyBC,SAASC,cAAT,CAAwB,SAAxB,CAAzB;AACD,GAFD;AAGD","file":"graph.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n\r\n/*\r\n  Example usage of GraphView component\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport GraphView from '../components/graph-view.js';\r\nimport GraphConfig from './graph-config.js'; // Configures node/edge types\r\n\r\nconst styles = {\r\n  graph: {\r\n    height: '100%',\r\n    width: '100%',\r\n  },\r\n};\r\n\r\nconst NODE_KEY = 'id'; // Key used to identify nodes\r\n\r\n// These keys are arbitrary (but must match the config)\r\n// However, GraphView renders text differently for empty types\r\n// so this has to be passed in if that behavior is desired.\r\nconst EMPTY_TYPE = 'empty'; // Empty node type\r\nconst SPECIAL_TYPE = 'special';\r\nconst SPECIAL_CHILD_SUBTYPE = 'specialChild';\r\nconst EMPTY_EDGE_TYPE = 'emptyEdge';\r\nconst SPECIAL_EDGE_TYPE = 'specialEdge';\r\n\r\n// NOTE: Edges must have 'source' & 'target' attributes\r\n// In a more realistic use case, the graph would probably originate\r\n// elsewhere in the App or be generated from some other state upstream of this component.\r\nconst sample = {\r\n  nodes: [\r\n    {\r\n      id: 1,\r\n      title: 'Two lines for nodes',\r\n      x: 258.3976135253906,\r\n      y: 331.9783248901367,\r\n      type: SPECIAL_TYPE,\r\n    },\r\n    {\r\n      id: 2,\r\n      title: 'Big text for multiline in node to 4 or 5 lines',\r\n      x: 593.9393920898438,\r\n      y: 260.6060791015625,\r\n      type: EMPTY_TYPE,\r\n      subtype: SPECIAL_CHILD_SUBTYPE,\r\n    },\r\n    {\r\n      id: 3,\r\n      title: 'Node C',\r\n      x: 237.5757598876953,\r\n      y: 61.81818389892578,\r\n      type: EMPTY_TYPE,\r\n    },\r\n    {\r\n      id: 4,\r\n      title: 'Node C',\r\n      x: 600.5757598876953,\r\n      y: 600.81818389892578,\r\n      type: EMPTY_TYPE,\r\n    },\r\n  ],\r\n  edges: [\r\n    {\r\n      source: 1,\r\n      target: 2,\r\n      type: SPECIAL_EDGE_TYPE,\r\n    },\r\n    {\r\n      source: 2,\r\n      target: 4,\r\n      type: EMPTY_EDGE_TYPE,\r\n    },\r\n  ],\r\n};\r\n\r\nexport class Graph extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      graph: sample,\r\n      selected: {},\r\n    };\r\n  }\r\n\r\n  // Helper to find the index of a given node\r\n  getNodeIndex(searchNode) {\r\n    return this.state.graph.nodes.findIndex((node) => {\r\n      return node[NODE_KEY] === searchNode[NODE_KEY];\r\n    });\r\n  }\r\n\r\n  // Helper to find the index of a given edge\r\n  getEdgeIndex(searchEdge) {\r\n    return this.state.graph.edges.findIndex((edge) => {\r\n      return edge.source === searchEdge.source && edge.target === searchEdge.target;\r\n    });\r\n  }\r\n\r\n  // Given a nodeKey, return the corresponding node\r\n  getViewNode = (nodeKey) => {\r\n    const searchNode = {};\r\n    searchNode[NODE_KEY] = nodeKey;\r\n    const i = this.getNodeIndex(searchNode);\r\n    return this.state.graph.nodes[i];\r\n  };\r\n\r\n  /*\r\n   * Handlers/Interaction\r\n   */\r\n\r\n  // Called by 'drag' handler, etc..\r\n  // to sync updates from D3 with the graph\r\n  onUpdateNode = (viewNode) => {\r\n    const graph = this.state.graph;\r\n    const i = this.getNodeIndex(viewNode);\r\n\r\n    graph.nodes[i] = viewNode;\r\n    this.setState({ graph: graph });\r\n  };\r\n\r\n  // Node 'mouseUp' handler\r\n  onSelectNode = (viewNode) => {\r\n    // Deselect events will send Null viewNode\r\n    if (!!viewNode) {\r\n      this.setState({ selected: viewNode });\r\n    } else {\r\n      this.setState({ selected: {} });\r\n    }\r\n  };\r\n\r\n  // Edge 'mouseUp' handler\r\n  onSelectEdge = (viewEdge) => {\r\n    this.setState({ selected: viewEdge });\r\n  };\r\n\r\n  // Updates the graph with a new node\r\n  onCreateNode = (x, y) => {\r\n    const graph = this.state.graph;\r\n\r\n    // This is just an example - any sort of logic\r\n    // could be used here to determine node type\r\n    // There is also support for subtypes. (see 'sample' above)\r\n    // The subtype geometry will underlay the 'type' geometry for a node\r\n    const type = Math.random() < 0.25 ? SPECIAL_TYPE : EMPTY_TYPE;\r\n\r\n    const viewNode = {\r\n      id: this.state.graph.nodes.length + 1,\r\n      title: '',\r\n      type: type,\r\n      x: x,\r\n      y: y,\r\n    };\r\n\r\n    graph.nodes.push(viewNode);\r\n    this.setState({ graph: graph });\r\n  };\r\n\r\n  // Deletes a node from the graph\r\n  onDeleteNode = (viewNode) => {\r\n    const graph = this.state.graph;\r\n    const i = this.getNodeIndex(viewNode);\r\n    graph.nodes.splice(i, 1);\r\n\r\n    // Delete any connected edges\r\n    const newEdges = graph.edges.filter((edge, i) => {\r\n      return edge.source != viewNode[NODE_KEY] && edge.target != viewNode[NODE_KEY];\r\n    });\r\n\r\n    graph.edges = newEdges;\r\n\r\n    this.setState({ graph: graph, selected: {} });\r\n  };\r\n\r\n  // Creates a new node between two edges\r\n  onCreateEdge = (sourceViewNode, targetViewNode) => {\r\n    const graph = this.state.graph;\r\n\r\n    // This is just an example - any sort of logic\r\n    // could be used here to determine edge type\r\n    const type = sourceViewNode.type === SPECIAL_TYPE ? SPECIAL_EDGE_TYPE : EMPTY_EDGE_TYPE;\r\n\r\n    const viewEdge = {\r\n      source: sourceViewNode[NODE_KEY],\r\n      target: targetViewNode[NODE_KEY],\r\n      type: type,\r\n    };\r\n\r\n    // Only add the edge when the source node is not the same as the target\r\n    if (viewEdge.source !== viewEdge.target) {\r\n      graph.edges.push(viewEdge);\r\n      this.setState({ graph: graph });\r\n    }\r\n  };\r\n\r\n  // Called when an edge is reattached to a different target.\r\n  onSwapEdge = (sourceViewNode, targetViewNode, viewEdge) => {\r\n    const graph = this.state.graph;\r\n    const i = this.getEdgeIndex(viewEdge);\r\n    const edge = JSON.parse(JSON.stringify(graph.edges[i]));\r\n\r\n    edge.source = sourceViewNode[NODE_KEY];\r\n    edge.target = targetViewNode[NODE_KEY];\r\n    graph.edges[i] = edge;\r\n\r\n    this.setState({ graph: graph });\r\n  };\r\n\r\n  // Called when an edge is deleted\r\n  onDeleteEdge = (viewEdge) => {\r\n    const graph = this.state.graph;\r\n    const i = this.getEdgeIndex(viewEdge);\r\n    graph.edges.splice(i, 1);\r\n    this.setState({ graph: graph, selected: {} });\r\n  };\r\n\r\n  /*\r\n   * Render\r\n   */\r\n\r\n  render() {\r\n    const nodes = this.state.graph.nodes;\r\n    const edges = this.state.graph.edges;\r\n    const selected = this.state.selected;\r\n\r\n    const NodeTypes = GraphConfig.NodeTypes;\r\n    const NodeSubtypes = GraphConfig.NodeSubtypes;\r\n    const EdgeTypes = GraphConfig.EdgeTypes;\r\n\r\n    return (\r\n      <div id=\"graph\" style={styles.graph}>\r\n        <GraphView\r\n          ref={(el) => (this.GraphView = el)}\r\n          nodeKey={NODE_KEY}\r\n          emptyType={EMPTY_TYPE}\r\n          nodes={nodes}\r\n          edges={edges}\r\n          selected={selected}\r\n          nodeTypes={NodeTypes}\r\n          nodeSubtypes={NodeSubtypes}\r\n          edgeTypes={EdgeTypes}\r\n          enableFocus={true}\r\n          getViewNode={this.getViewNode}\r\n          onSelectNode={this.onSelectNode}\r\n          onCreateNode={this.onCreateNode}\r\n          onUpdateNode={this.onUpdateNode}\r\n          onDeleteNode={this.onDeleteNode}\r\n          onSelectEdge={this.onSelectEdge}\r\n          onCreateEdge={this.onCreateEdge}\r\n          onSwapEdge={this.onSwapEdge}\r\n          onDeleteEdge={this.onDeleteEdge}\r\n          maxTitleChars={50}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// To bootstrap this example into the Document\r\nclass App extends Component {\r\n  render() {\r\n    return <Graph />;\r\n  }\r\n}\r\nif (typeof window !== 'undefined') {\r\n  window.onload = function() {\r\n    ReactDOM.render(<App />, document.getElementById('content'));\r\n  };\r\n}\r\n"]}